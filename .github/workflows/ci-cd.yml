name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      version:
        description: 'Version tag for production release (e.g., 1.0.0)'
        required: true
        type: string

env:
  PHP_VERSION: '8.4'
  NODE_MAJOR: '22'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # ----- CI Jobs -----
  lint-twig:
    name: Lint Twig Templates
    runs-on: ubuntu-latest
    env:
      APP_ENV: test
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ env.PHP_VERSION }}
          extensions: mbstring, xml, ctype, iconv, intl, zip
          coverage: none
          tools: composer:v2

      - name: Get composer cache directory
        id: composer-cache
        run: echo "dir=$(composer config cache-files-dir)" >> $GITHUB_OUTPUT

      - name: Cache composer dependencies
        uses: actions/cache@v4
        id: cache-composer
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ runner.os }}-php-${{ env.PHP_VERSION }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-php-${{ env.PHP_VERSION }}-composer-

      - name: Install Dependencies
        run: composer install --prefer-dist --no-progress --no-interaction

      - name: Run Twig Lint
        run: php bin/console lint:twig templates

  lint-yaml:
    name: Lint YAML Files
    runs-on: ubuntu-latest
    env:
      APP_ENV: test
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ env.PHP_VERSION }}
          extensions: mbstring, xml, ctype, iconv, intl, zip
          coverage: none
          tools: composer:v2

      - name: Get composer cache directory
        id: composer-cache
        run: echo "dir=$(composer config cache-files-dir)" >> $GITHUB_OUTPUT

      - name: Cache composer dependencies
        uses: actions/cache@v4
        id: cache-composer
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ runner.os }}-php-${{ env.PHP_VERSION }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-php-${{ env.PHP_VERSION }}-composer-

      - name: Install Dependencies
        run: composer install --prefer-dist --no-progress --no-interaction

      - name: Run YAML Lint
        run: php bin/console lint:yaml config --parse-tags

  security-check:
    name: Symfony Security Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Install Symfony CLI
        run: |
          curl -1sLf 'https://dl.cloudsmith.io/public/symfony/stable/setup.deb.sh' | sudo -E bash
          sudo apt-get update
          sudo apt-get install symfony-cli -y

      - name: Run Symfony Security Check
        run: symfony check:security --no-interaction

  phpstan:
    name: PHPStan
    runs-on: ubuntu-latest
    env:
      APP_ENV: test
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ env.PHP_VERSION }}
          extensions: mbstring, xml, ctype, iconv, intl, zip, pdo, pdo_sqlite
          coverage: none
          tools: composer:v2

      - name: Get composer cache directory
        id: composer-cache
        run: echo "dir=$(composer config cache-files-dir)" >> $GITHUB_OUTPUT

      - name: Cache composer dependencies
        uses: actions/cache@v4
        id: cache-composer
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ runner.os }}-php-${{ env.PHP_VERSION }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-php-${{ env.PHP_VERSION }}-composer-

      - name: Install Dependencies
        run: composer install --prefer-dist --no-progress --no-interaction

      - name: Warmup Symfony Cache for Dev Environment
        run: APP_ENV=dev php bin/console cache:warmup

      - name: Run PHPStan
        run: composer phpstan

  cs-check:
    name: PHP CS Fixer
    runs-on: ubuntu-latest
    env:
      APP_ENV: test
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ env.PHP_VERSION }}
          extensions: mbstring, xml, ctype, iconv, intl, zip
          coverage: none
          tools: composer:v2

      - name: Get composer cache directory
        id: composer-cache
        run: echo "dir=$(composer config cache-files-dir)" >> $GITHUB_OUTPUT

      - name: Cache composer dependencies
        uses: actions/cache@v4
        id: cache-composer
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ runner.os }}-php-${{ env.PHP_VERSION }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-php-${{ env.PHP_VERSION }}-composer-

      - name: Install Dependencies
        run: composer install --prefer-dist --no-progress --no-interaction

      - name: Run PHP CS Fixer (Dry Run)
        run: composer cs-check

  phpmd:
    name: PHPMD
    runs-on: ubuntu-latest
    env:
      APP_ENV: test
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ env.PHP_VERSION }}
          extensions: mbstring, xml, ctype, iconv, intl, zip
          coverage: none
          tools: composer:v2

      - name: Get composer cache directory
        id: composer-cache
        run: echo "dir=$(composer config cache-files-dir)" >> $GITHUB_OUTPUT

      - name: Cache composer dependencies
        uses: actions/cache@v4
        id: cache-composer
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ runner.os }}-php-${{ env.PHP_VERSION }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-php-${{ env.PHP_VERSION }}-composer-

      - name: Install Dependencies
        run: composer install --prefer-dist --no-progress --no-interaction

      - name: Run PHPMD
        run: composer phpmd

  unit-tests:
    name: PHPUnit Tests
    runs-on: ubuntu-latest
    env:
      APP_ENV: test
      DATABASE_URL: sqlite:///%kernel.project_dir%/var/data.db
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ env.PHP_VERSION }}
          extensions: mbstring, xml, ctype, iconv, intl, zip, pdo, pdo_sqlite
          coverage: none
          tools: composer:v2

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_MAJOR }}
          cache: 'npm'

      - name: Get composer cache directory
        id: composer-cache
        run: echo "dir=$(composer config cache-files-dir)" >> $GITHUB_OUTPUT

      - name: Cache composer dependencies
        uses: actions/cache@v4
        id: cache-composer
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ runner.os }}-php-${{ env.PHP_VERSION }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-php-${{ env.PHP_VERSION }}-composer-

      - name: Install Composer Dependencies
        run: composer install --prefer-dist --no-progress --no-interaction

      - name: Install NPM Dependencies
        run: npm ci || npm install

      - name: Create required directories
        run: |
          mkdir -p var/tailwind public/styles
          chmod -R 777 var

      - name: Build Tailwind CSS
        run: php bin/console tailwind:build --minify

      - name: Copy Tailwind CSS to public directory
        run: cp var/tailwind/app.built.css public/styles/app.css

      - name: Run PHPUnit Tests
        run: php bin/phpunit --testdox

  # ----- Build Jobs -----
  build-dev:
    name: Build Development Image
    runs-on: ubuntu-latest
    needs: [ phpstan, cs-check, phpmd, lint-twig, lint-yaml, security-check, unit-tests ]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    permissions:
      contents: read
      packages: write
    outputs:
      intermediate_image: ${{ steps.intermediate-tag.outputs.IMAGE }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set Docker metadata for dev
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          labels: |
            org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.version=dev

      - name: Define Intermediate Tag
        id: intermediate-tag
        run: |
          IMAGE_NAME="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}"
          TAG="dev-sha-${{ github.sha }}"
          echo "Intermediate image: ${IMAGE_NAME}:${TAG}"
          echo "IMAGE=${IMAGE_NAME}:${TAG}" >> $GITHUB_OUTPUT

      - name: Build and push Intermediate Dev Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./docker/build/Dockerfile
          push: true
          tags: ${{ steps.intermediate-tag.outputs.IMAGE }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha,scope=dev
          cache-to: type=gha,mode=max,scope=dev
          build-args: |
            APP_ENV=dev
            APP_DEBUG=1
            PHP_VERSION=${{ env.PHP_VERSION }}
            NODE_MAJOR=${{ env.NODE_MAJOR }}

      - name: Output Information
        run: |
          echo "Intermediate Dev Image: ${{ steps.intermediate-tag.outputs.IMAGE }}"

  build-prod:
    name: Build Production Image
    runs-on: ubuntu-latest
    needs: [ phpstan, cs-check, phpmd, lint-twig, lint-yaml, security-check, unit-tests ]
    permissions:
      contents: read
      packages: write
    outputs:
      intermediate_image: ${{ steps.intermediate-tag.outputs.IMAGE }}
      version: ${{ steps.version.outputs.VERSION }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract version
        id: version
        run: |
          VERSION=""
          if [ "${{ github.event_name }}" = "workflow_dispatch" ] && [ "${{ github.event.inputs.version }}" != "" ]; then
            VERSION=${{ github.event.inputs.version }}
          elif [ -f VERSION ]; then
            VERSION=$(cat VERSION)
          else
            # Use short SHA as fallback version
            VERSION="sha-$(echo ${{ github.sha }} | cut -c1-7)"
            echo "WARNING: No explicit version provided. Using commit SHA: $VERSION"
          fi
          # Ensure version is sanitized for Docker tags (e.g., remove leading 'v')
          VERSION=$(echo ${VERSION} | sed 's/^v//')
          echo "Using version: $VERSION"
          echo "VERSION=${VERSION}" >> $GITHUB_OUTPUT

      - name: Set Docker metadata for prod
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          labels: |
            org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.version=${{ steps.version.outputs.VERSION }}

      - name: Define Intermediate Tag
        id: intermediate-tag
        run: |
          IMAGE_NAME="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}"
          TAG="prod-sha-${{ github.sha }}"
          echo "Intermediate image: ${IMAGE_NAME}:${TAG}"
          echo "IMAGE=${IMAGE_NAME}:${TAG}" >> $GITHUB_OUTPUT

      - name: Build and push Intermediate Production Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./docker/build/Dockerfile
          push: true
          tags: ${{ steps.intermediate-tag.outputs.IMAGE }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha,scope=prod
          cache-to: type=gha,mode=max,scope=prod
          build-args: |
            APP_ENV=prod
            APP_DEBUG=0
            PHP_VERSION=${{ env.PHP_VERSION }}
            NODE_MAJOR=${{ env.NODE_MAJOR }}

      - name: Output Information
        run: |
          echo "Intermediate Production Image: ${{ steps.intermediate-tag.outputs.IMAGE }}"
          echo "Version: ${{ steps.version.outputs.VERSION }}"

  # ----- Push Jobs -----
  push-dev:
    name: Push Development Image
    runs-on: ubuntu-latest
    needs: build-dev
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    permissions:
      packages: write
      contents: read

    steps:
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Pull intermediate image
        run: |
          echo "Pulling intermediate image: ${{ needs.build-dev.outputs.intermediate_image }}"
          docker pull ${{ needs.build-dev.outputs.intermediate_image }}

      - name: Tag and push dev image
        run: |
          INTERMEDIATE_IMAGE="${{ needs.build-dev.outputs.intermediate_image }}"
          IMAGE_NAME="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}"

          echo "Tagging and pushing dev image..."
          docker tag "$INTERMEDIATE_IMAGE" "${IMAGE_NAME}:dev"
          docker push "${IMAGE_NAME}:dev"

          echo "Successfully pushed:"
          echo "  - ${IMAGE_NAME}:dev"

  push-prod:
    name: Push Production Image
    runs-on: ubuntu-latest
    needs: build-prod
    environment: production-registry
    permissions:
      packages: write
      contents: read

    steps:
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Pull intermediate image
        run: |
          echo "Pulling intermediate image: ${{ needs.build-prod.outputs.intermediate_image }}"
          docker pull ${{ needs.build-prod.outputs.intermediate_image }}

      - name: Tag and push production images
        run: |
          INTERMEDIATE_IMAGE="${{ needs.build-prod.outputs.intermediate_image }}"
          IMAGE_NAME="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}"
          VERSION="${{ needs.build-prod.outputs.version }}"

          echo "Tagging and pushing production images..."

          # Tag and push :latest
          echo "Tagging as latest..."
          docker tag "$INTERMEDIATE_IMAGE" "${IMAGE_NAME}:latest"
          docker push "${IMAGE_NAME}:latest"

          # Tag and push version
          echo "Tagging as version ${VERSION}..."
          docker tag "$INTERMEDIATE_IMAGE" "${IMAGE_NAME}:${VERSION}"
          docker push "${IMAGE_NAME}:${VERSION}"

          echo "Successfully pushed:"
          echo "  - ${IMAGE_NAME}:latest"
          echo "  - ${IMAGE_NAME}:${VERSION}"
