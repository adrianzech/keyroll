name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
    tags: [ 'v*.*.*' ]
  workflow_dispatch:
    inputs:
      version:
        description: 'Version tag for the image'
        required: false

env:
  PHP_VERSION: '8.4'
  NODE_MAJOR: '22'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # ----- CI Jobs -----
  lint-twig:
    name: Lint Twig Templates
    runs-on: ubuntu-latest
    env:
      APP_ENV: test
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ env.PHP_VERSION }}
          extensions: mbstring, xml, ctype, iconv, intl, zip
          coverage: none
          tools: composer:v2

      - name: Get composer cache directory
        id: composer-cache
        run: echo "dir=$(composer config cache-files-dir)" >> $GITHUB_OUTPUT

      - name: Cache composer dependencies
        uses: actions/cache@v4
        id: cache-composer
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ runner.os }}-php-${{ env.PHP_VERSION }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-php-${{ env.PHP_VERSION }}-composer-

      - name: Install Dependencies
        run: composer install --prefer-dist --no-progress --no-interaction

      - name: Run Twig Lint
        run: php bin/console lint:twig templates

  lint-yaml:
    name: Lint YAML Files
    runs-on: ubuntu-latest
    env:
      APP_ENV: test
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ env.PHP_VERSION }}
          extensions: mbstring, xml, ctype, iconv, intl, zip
          coverage: none
          tools: composer:v2

      - name: Get composer cache directory
        id: composer-cache
        run: echo "dir=$(composer config cache-files-dir)" >> $GITHUB_OUTPUT

      - name: Cache composer dependencies
        uses: actions/cache@v4
        id: cache-composer
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ runner.os }}-php-${{ env.PHP_VERSION }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-php-${{ env.PHP_VERSION }}-composer-

      - name: Install Dependencies
        run: composer install --prefer-dist --no-progress --no-interaction

      - name: Run YAML Lint
        run: php bin/console lint:yaml config --parse-tags

  security-check:
    name: Symfony Security Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Install Symfony CLI
        run: |
          curl -1sLf 'https://dl.cloudsmith.io/public/symfony/stable/setup.deb.sh' | sudo -E bash
          sudo apt-get update
          sudo apt-get install symfony-cli -y

      - name: Run Symfony Security Check
        run: symfony check:security --no-interaction

  phpstan:
    name: PHPStan
    runs-on: ubuntu-latest
    env:
      APP_ENV: test
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ env.PHP_VERSION }}
          extensions: mbstring, xml, ctype, iconv, intl, zip, pdo, pdo_sqlite
          coverage: none
          tools: composer:v2

      - name: Get composer cache directory
        id: composer-cache
        run: echo "dir=$(composer config cache-files-dir)" >> $GITHUB_OUTPUT

      - name: Cache composer dependencies
        uses: actions/cache@v4
        id: cache-composer
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ runner.os }}-php-${{ env.PHP_VERSION }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-php-${{ env.PHP_VERSION }}-composer-

      - name: Install Dependencies
        run: composer install --prefer-dist --no-progress --no-interaction

      - name: Warmup Symfony Cache for Dev Environment
        run: APP_ENV=dev php bin/console cache:warmup

      - name: Run PHPStan
        run: composer phpstan

  cs-check:
    name: PHP CS Fixer
    runs-on: ubuntu-latest
    env:
      APP_ENV: test
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ env.PHP_VERSION }}
          extensions: mbstring, xml, ctype, iconv, intl, zip
          coverage: none
          tools: composer:v2

      - name: Get composer cache directory
        id: composer-cache
        run: echo "dir=$(composer config cache-files-dir)" >> $GITHUB_OUTPUT

      - name: Cache composer dependencies
        uses: actions/cache@v4
        id: cache-composer
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ runner.os }}-php-${{ env.PHP_VERSION }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-php-${{ env.PHP_VERSION }}-composer-

      - name: Install Dependencies
        run: composer install --prefer-dist --no-progress --no-interaction

      - name: Run PHP CS Fixer (Dry Run)
        run: composer cs-check

  phpmd:
    name: PHPMD
    runs-on: ubuntu-latest
    env:
      APP_ENV: test
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ env.PHP_VERSION }}
          extensions: mbstring, xml, ctype, iconv, intl, zip
          coverage: none
          tools: composer:v2

      - name: Get composer cache directory
        id: composer-cache
        run: echo "dir=$(composer config cache-files-dir)" >> $GITHUB_OUTPUT

      - name: Cache composer dependencies
        uses: actions/cache@v4
        id: cache-composer
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ runner.os }}-php-${{ env.PHP_VERSION }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-php-${{ env.PHP_VERSION }}-composer-

      - name: Install Dependencies
        run: composer install --prefer-dist --no-progress --no-interaction

      - name: Run PHPMD
        run: composer phpmd

  unit-tests:
    name: PHPUnit Tests
    runs-on: ubuntu-latest
    env:
      APP_ENV: test
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ env.PHP_VERSION }}
          extensions: mbstring, xml, ctype, iconv, intl, zip, pdo, pdo_sqlite
          coverage: none
          tools: composer:v2

      - name: Get composer cache directory
        id: composer-cache
        run: echo "dir=$(composer config cache-files-dir)" >> $GITHUB_OUTPUT

      - name: Cache composer dependencies
        uses: actions/cache@v4
        id: cache-composer
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ runner.os }}-php-${{ env.PHP_VERSION }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-php-${{ env.PHP_VERSION }}-composer-

      - name: Install Dependencies
        run: composer install --prefer-dist --no-progress --no-interaction

      - name: Run PHPUnit Tests
        run: php bin/phpunit

  # ----- Build Job -----
  build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: [ phpstan, cs-check, phpmd, lint-twig, lint-yaml, security-check, unit-tests ]
    permissions:
      contents: read
      packages: write
    outputs:
      image_tags: ${{ steps.meta.outputs.tags }}
      image_labels: ${{ steps.meta.outputs.labels }}
      intermediate_image: ${{ steps.intermediate-tag.outputs.IMAGE }}
      image_name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract version
        id: version
        run: |
          VERSION=""
          if [ "${{ github.event_name }}" = "workflow_dispatch" ] && [ "${{ github.event.inputs.version }}" != "" ]; then
            VERSION=${{ github.event.inputs.version }}
          elif [[ "${{ github.ref }}" == refs/tags/v* ]]; then
            VERSION=${{ github.ref_name }}
          elif [ -f VERSION ]; then
            VERSION=$(cat VERSION)
          else
            # Use short SHA as fallback version for intermediate tag
            VERSION="sha-$(echo ${{ github.sha }} | cut -c1-7)"
            echo "WARNING: No explicit version provided (tag, input, VERSION file). Using commit SHA based version: $VERSION"
          fi
          # Ensure version is sanitized for Docker tags (e.g., remove leading 'v')
          VERSION=$(echo ${VERSION} | sed 's/^v//')
          echo "Using version: $VERSION"
          echo "VERSION=${VERSION}" >> $GITHUB_OUTPUT

      - name: Set Final Docker tags and labels
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            # Tag 'vX.Y.Z' pushes with 'X.Y.Z'
            type=ref,event=tag
            # Add specific extracted version (handles VERSION file, workflow_dispatch, or fallback sha)
            type=raw,value=${{ steps.version.outputs.VERSION }}
            # Tag 'main' branch pushes with 'latest'
            type=raw,value=latest,enable=${{ github.ref == 'refs/heads/main' }}
          labels: |
            org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}
            org.opencontainers.image.created=${{ steps.docker_meta_prep.outputs.created }} # Use timestamp from prep step if needed, else remove
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.version=${{ steps.version.outputs.VERSION }} # Use the determined version

      - name: Define Intermediate Tag
        id: intermediate-tag
        run: |
          IMAGE_NAME="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}"
          # Use full SHA for uniqueness in intermediate tag
          TAG="sha-${{ github.sha }}"
          echo "Intermediate image: ${IMAGE_NAME}:${TAG}"
          echo "IMAGE=${IMAGE_NAME}:${TAG}" >> $GITHUB_OUTPUT

      - name: Build and push Intermediate Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./docker/build/Dockerfile
          push: true
          tags: ${{ steps.intermediate-tag.outputs.IMAGE }}
          labels: ${{ steps.meta.outputs.labels }} # Apply labels here
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            APP_ENV=prod
            PHP_VERSION=${{ env.PHP_VERSION }}
            NODE_MAJOR=${{ env.NODE_MAJOR }}

      - name: Output Information
        run: |
          echo "Intermediate Image: ${{ steps.intermediate-tag.outputs.IMAGE }}"
          echo "Final Tags Calculated: ${{ steps.meta.outputs.tags }}"
          echo "Final Labels Calculated: ${{ steps.meta.outputs.labels }}"

  # ----- Push Job -----
  push:
    name: Push Final Docker Tags
    runs-on: ubuntu-latest
    needs: build
    environment: production-registry
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v'))
    permissions:
      packages: write
      contents: read

    steps:
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Pull intermediate image
        run: |
          echo "Pulling intermediate image: ${{ needs.build.outputs.intermediate_image }}"
          docker pull ${{ needs.build.outputs.intermediate_image }}

      - name: Tag image with final tags
        run: |
          INTERMEDIATE_IMAGE="${{ needs.build.outputs.intermediate_image }}"
          FINAL_TAGS=$(echo "${{ needs.build.outputs.image_tags }}" | tr '\n' ' ')
          echo "Applying final tags: $FINAL_TAGS"
          for TAG in ${FINAL_TAGS}; do
            if [[ "$TAG" == *":"* ]]; then
              echo "Tagging $INTERMEDIATE_IMAGE as $TAG"
              docker tag "$INTERMEDIATE_IMAGE" "$TAG"
            else
              FULL_TAG="${{ needs.build.outputs.image_name }}:$TAG"
              echo "Tagging $INTERMEDIATE_IMAGE as $FULL_TAG"
              docker tag "$INTERMEDIATE_IMAGE" "$FULL_TAG"
            fi
          done


      - name: Push final tags
        run: |
          FINAL_TAGS=$(echo "${{ needs.build.outputs.image_tags }}" | tr '\n' ' ')
          echo "Pushing final tags: $FINAL_TAGS"
          for TAG in ${FINAL_TAGS}; do
            if [[ "$TAG" == *":"* ]]; then
              echo "Pushing $TAG"
              docker push "$TAG"
            else
              FULL_TAG="${{ needs.build.outputs.image_name }}:$TAG"
              echo "Pushing $FULL_TAG"
              docker push "$FULL_TAG"
            fi
          done
